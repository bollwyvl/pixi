[project]
name = "my installer"
version = "0.1.0"
channels = ["conda-forge"]
platforms = ["linux-64", "linux-aarch64", "linux-ppc64le", "osx-64", "osx-arm64", "win-64"]

[environments]
installer = ["installer"]
build-linux = ["build", "build-linux"]
build-osx = ["build", "build-osx", "build-win"]
build-win = ["build", "build-win"]

[feature.installer.dependencies]
python = "*"      # constructor requires this
micromamba = "*"  # provide `bin/activate` (or `Scripts/activate`)

[feature.build.dependencies]
constructor = "*"
jaq = "*"
micromamba = "*"

[feature.build.tasks]
platform = "pixi info --json | jaq -r '.platform'"
specs = {cmd="""
  pixi project export conda-explicit-spec --environment installer ./installer/specs
""", inputs=["pixi.lock"], outputs=["installer/specs"]}
construct = """
  rm -rf dist/installer/$CC_PLATFORM
  && constructor installer
    --platform $CC_PLATFORM
    --cache-dir build/.cache/constructor
    --output-dir dist/installer/$CC_PLATFORM
    --conda-exe $(which micromamba)
"""

[feature.build-linux]
platforms = ["linux-64", "linux-aarch64", "linux-ppc64le"]
[feature.build-linux.tasks]
build = {depends-on = ["specs", "build-linux-64", "build-linux-aarch64", "build-linux-ppc64le"]}
build-linux-64 = {cmd="""
  CC_PLATFORM=linux-64 pixi run construct
""", outputs=["dist/installer/linux-64"], inputs=[
  "installer/{construct.yaml,specs/installer_linux-64_conda_spec.txt}",
]}
build-linux-aarch64 = {cmd="""
  CC_PLATFORM=linux-aarch64 pixi run construct
""", outputs=["dist/installer/linux-aarch64"], inputs=[
  "installer/{construct.yaml,specs/installer_linux-aarch64_conda_spec.txt}",
]}
build-linux-ppc64le = {cmd="""
  CC_PLATFORM=linux-ppc64le pixi run construct
""", outputs=["dist/installer/linux-ppc64le"], inputs=[
  "installer/{construct.yaml,specs/installer_linux-ppc64le_conda_spec.txt}",
]}
start = {depends-on = ["build"], cmd = """
  rm -rf build/_installer_env_/
  && bash dist/installer/$(pixi run platform)/*.sh -fbp build/_installer_env_/
"""}

[feature.build-osx]
platforms = ["osx-64", "osx-arm64"]
[feature.build-osx.tasks]
build = {depends-on = ["specs", "build-osx-64", "build-osx-arm64"]}
build-osx-64 = {cmd="""
  CC_PLATFORM=osx-64 pixi run construct
""", outputs=["dist/installer/osx-64"], inputs=[
  "installer/{construct.yaml,specs/installer_osx-64_conda_spec.txt}",
]}
build-osx-arm64 = {cmd="""
  CC_PLATFORM=osx-arm64 pixi run construct
""", outputs=["dist/installer/osx-arm64"], inputs=[
  "installer/{construct.yaml,specs/installer_osx-arm64_conda_spec.txt}",
]}
start = {depends-on = ["build"], cmd = """
  rm -rf build/_installer_env_/
  && bash dist/installer/$(pixi run platform)/*.sh -fbp build/_installer_env_/
"""}

[feature.build-win]
platforms = ["win-64"]
[feature.build-win.tasks]
build = {depends-on = ["specs", "build-win-64"]}
build-win-64 = {cmd="""
  CC_PLATFORM=win-64 pixi run construct
""", outputs=["dist/installer/win-64"], inputs=[
  "installer/{construct.yaml,specs/installer_win-64_conda_spec.txt}",
]}
start = {depends-on = ["build"], cmd = '''
rm -rf build/_installer_env_/
&& start
  /wait
  ""
  dist\installer\$(pixi run platform)\*.exe
  /InstallationType=JustMe
  /RegisterPython=0
  /S
  /D=build\_installer_env_
'''}
